<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[会话]]></title>
    <url>%2F2018%2F12%2F23%2F%E4%BC%9A%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[会话技术存储客户端的状态 Http协议是无状态的，也就是说每个客户访问服务器端资源时，服务器并不知道该客户端是谁，所以需要会话技术识别客户端的状态。 由一个问题引出今天的内容，例如网站的购物系统，用户将购买的商品信息存储到哪里？因为Http协议是无状态的，也就是说每个客户访问服务器端资源时，服务器并不知道该客户端是谁，所以需要会话技术识别客户端的状态。会话技术是帮助服务器记住客户端状态（区分客户端） 从打开一个浏览器访问某个站点，到关闭这个浏览器的整个过程，称为一次会话。 Cookie：数据存储在客户端本地，减少服务器端的存储的压力，安全性不好，客户端 可以清除cookie Session：将数据存储到服务器端，安全性相对好，增加服务器的压力 Session和Cookie共同的作用和区别 作用: 都是存储数据 session是存在服务器端 cookie是存在客户端 cookie和session的作用范围都是一次会话中cookie的持久化时间可以通过setMaxAge实现 sessionId的持久化时间可以通过 可以在工程中的web.xml中进行配置(默认是30分钟) 12345&lt;session-config&gt; &lt;session-timeout&gt;30&lt;/session-timeout&gt;&lt;/session-config&gt; CookieCookie是客户端技术，程序把每个用户的数据以cookie的形式保存到各自浏览器中。当用户使用浏览器再次访问服务器中的web资源的时候，就会带着各自的数据过去。这样，web资源处理的就是用户各自的数据了。 SessionSession是服务器端技术，利用这个技术，服务器在运行时为每一个用户的浏览器创建一个独享的session对象。由于session为用户浏览器独享，所以用户在访问服务器的时候，可以把各自的数据放在各自的session中，当用户再次访问服务器中的web资源的时候，其他web资源再从用户各自的session中取出数据为用户服务。 session也是一个域对象 –session.setAttribute(String name,Object obj); –session.getAttribute(String name); –session.removeAttribute(String name); session对象的生命周期？ –创建： 第一次执行request.getSession();时创建 –销毁： 服务器关闭 session(默认是30分钟) 可以在工程中的web.xml中进行配置 12345&lt;session-config&gt; &lt;session-timeout&gt;30&lt;/session-timeout&gt;&lt;/session-config&gt; 30分钟 手动销毁：session.invalidate(); –作用范围： –默认是一次会话中]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[客户端与tomcat服务器请求回复流程]]></title>
    <url>%2F2018%2F12%2F23%2F%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8Etomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E5%9B%9E%E5%A4%8D%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转发与重定向的区别]]></title>
    <url>%2F2018%2F12%2F23%2F%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[转发与重定向的区别转发是服务器内部行为, 当客户端发送请求到服务器中的serlvet1时, 该servlet1如果没有所需的资源, 可以通过转发访问servlet2, 新的serlvet2将继续处理同一个请求,而浏览器不会知道这个过程, 转发的路径必须是同一个web容器下的url, 其不能转向到其他的web路径上去 转发前后是一个request域对象, servlet1与servlet2共享一个request域对象. 转发通过request实现 1234// 获得请求转发器, 地址直接填资源名称就可以RequestDispatcher requestDispatcher=request.getRequestDispatcher("/redirect2");// 通过转发器对象转发requestDispatcher.forward(request, response); 重定向是客户端行为, web服务器接受客户端发来的请求后发送302状态码响应及对应新的url给客户浏览器, 客户浏览器发现是302响应, 则自动再发送一个新的http请求, 请求url是新的地址, 服务器根据此请求寻找资源并发送给客户 重定向通过response实现 12// 注意和转发的区别, 这里的地址要加上项目名称response.sendRedirect("/demo01/response2"); 区别 重定向客户端请求两次 转发请求一次 重定向地址栏url变化 转发地址不变 重定向可以访问外部网站 转发只能是服务器内部资源 转发性能比重定向更高]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
</search>
